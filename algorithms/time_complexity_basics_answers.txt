1. What is time complexity and what is its relation to algorithms?

A: Time complexity is the estimation of how long a program will take to run. It is related to algorithm's because it can identify algorithm's in a program that will be inefficient as input to the algorithm increases. 

2. What is runtime?

A: Runtime is how long it takes an algorithm to run and is used synonymously with time complexity. 

3. How is the runtime of an algorithm calculated?

A: The runtime of an algorithm is calculated by added up the operations of the algorithm then keeping the largest term and dropping the constants.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithm growth rate not covered and place it in the correct spot in your list.

A:  - Constant 
    - Logarithmic
    - Linear 
    - Log-Linear 
    - Quadratic 
    - Cubic
    - Exponential

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

An example of a linear growth rate would be sorting through my mail when it comes in looking for that one really interesting piece of mail. 

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: O(n)

7. Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: O(n^2)

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: O(2^n)

9. Out of the code snippets you just saw, which is the most time efficient?

The most time efficient of these code snippets is the first code snippet which is linear search. 
