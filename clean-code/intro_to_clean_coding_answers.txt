1. In your own words, explain what clean code is and why it is important.

A: Clean code is code that is (1) organized in a manner that is easiest to navigate, replicate, and change if needed, (2) clear and readable by someone stepping into the code to work on it, and (3) consistent with naming, syntax, methodology, etc. In short, clean code is organized, clear, and consistent. 

2. Read this article about Toyota and their use of bad code. Although you may not understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A: Traffic lights are one example I can think of. If code is not created to an acceptable standard then it could potentially result in a red light never turning green, or a red light turning green when it shouldn't. In the neighborhood I live in this actually happened. A traffic light was installed at an intersection that previously did not have one. A left turn lane was also created. The day this new traffic light was activated the left turn lane would build up with a very large line of cars and you would see multiple traffic cycles take place before the left turn lane would be allowed to go. The wait was so long people began to run the red light, and some were able to call the city and talk with the city while they were sitting and waiting on this light to turn green. Fortunately it was corrected quickly and did not result in any accidents. 

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)              // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

A: I would not consider this to be clean code for the following reasons:

1. The variables are very generic (x,y,z) and therefore comments are required in order to understand what's going on.
2. The indentation does not provide a clear layout of what's going on in this function. 

I would refactor this in the following way:

FUNCTION convertScale
  GET temperature
  GET scale
  IF scale is EQUAL to "F" THEN
    SET result to (temperature - 32) * (5/9)
    PRINT result
  ELSE IF scale is EQUAL to "C" THEN
    SET result to temperature * 1.8 + 32
    PRINT result
  END IF
END FUNCTION


4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

A: I would not consider this to be clean for the following reasons:

1. calcPercent is abbreviated and could be written out in it's entirety.
2. The equation could utilize parenthesis for clarity.

I would refactor it in the following way:

FUNCTION calculatePercentage
  GET sum
  GET total
  IF total is NOT EQUAL to 0 THEN
    SET percentage to (sum / total) * 100
  ELSE
    PRINT "Sorry, cannot divide by 0"
  END IF

  PRINT percentage
END FUNCTION

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

  a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

  FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
  END FUNCTION

  A: 
  FUNCTION calculateTotal
    GET subTotal
    GET tax
    GET discountRate
    IF discountRate is NOT EQUAL to 0 THEN
      SET total to (subTotal * discountRate) + (subTotal * tax)
      RETURN total
    ELSE
      SET total to subTotal + (subTotal * tax)
      RETURN total
    END IF
  END FUNCTION

  FUNCTION checkOutCustomer
    GET paymentType
    CALL calculateTotal RETURNING total
    PRINT "Your total due is: " + total
    CASE paymentType OF
      CASH : 
        CALL getPayment RETURNING amount
        PRINT "Change due: " + amount - total
      CREDIT CARD :
        CALL getPayment RETURNING amount
        PRINT "Your credit card has been charged: " + total
    END CASE
  END FUNCTION


  b. The following function checks out a book if there are no issues with the guest's account.

  FUNCTION checkoutBook(book, guest)
    IF guest.accountActive THEN
        IF NOT(guest.hasOverdueBooks) THEN
            IF guest.outstandingFees = 0 THEN
              APPEND book to guest.books
              SET book.status to "Checked Out"
              PRINT "Your books have been issued."
            END IF
        END IF
    ELSE
        PRINT "Unable to check out book."
    END IF
  END FUNCTION

  A:
  FUNCTION isAccountGood
    GET guest
    IF guest.accountActive is EQUAL to true AND guest.hasOverdueBooks is EQUAL to false AND guest.outstandingFees is EQUAL to 0 THEN
      RETURN true
    ELSE
      RETURN false
    END IF
  END FUNCTION

  FUNCTION checkoutBook
    GET guest
    GET book
    CALL isAccountGood WITH guest RETURNING guestStatus
    IF guestStatus is EQUAL to true THEN
      APPEND book to guest.books
      SET book.status to "Checked out"
      PRINT "Your books have been issued."
    ELSE 
      PRINT "Unable to check out book."
    END IF 
  END FUNCTION


  c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

  CLASS BankAccount

  FUNCTION displayBalance
      PRINT balance
  END FUNCTION

  FUNCTION deposit(amount)
      SET balance to balance + amount
  END FUNCTION

  FUNCTION withdraw(amount)
      IF balance > amount THEN
        SET balance to balance - amount
      END
  END FUNCTION

  FUNCTION creditCardOffer
      IF NOT(customer.hasCreditCard) THEN
          CALL offerCreditCard
      END
  END FUNCTION 

  FUNCTION checkStatus
      IF NOT(customer.hasCheckingAccount) THEN
          CALL offerCheckingAccount
      END
  END FUNCTION

  ....
  ....
  ....

  END

  A:
  CLASS BankAccount
    FUNCTION displayBalance
      GET balance
      PRINT balance
    END FUNCTION

    FUNCTION deposit
      GET amount
      GET balance
      SET balance to balance + amount
    END FUNCTION

    FUNCTION withdraw
      GET amount
      GET balance
      IF balance is GREATER THAN amount THEN
        SET balance to balance - amount
      ELSE 
        PRINT "Insufficient funds"
      END IF
    END FUNCTION
  END CLASS

  CLASS AccountOffers
    FUNCTION creditCardOffer
      GET customer
      IF customer.hasCreditCard is EQUAL to false THEN
        CALL offerCreditCard 
      END IF 
    END FUNCTION

    FUNCTION checkingAccountOffer
      GET customer
      IF customer.hasCheckingAccount is Equal to false THEN
        CALL offerCheckingAccount
      END IF
    END FUNCTION
  END CLASS